<!-- table allows you to override/define how reverse engineering
		is done for a specific table -->
	<table name="ORDERS">
		<primary-key>
			<!-- setting up a specific id generator for a table -->
			<generator class="sequence">
				<param name="table">seq_table</param>
			</generator>
			<key-column name="CUSTID" />
		</primary-key>
		<column name="NAME" property="orderName" type="string" />
		<!-- control many-to-one and set names for a specific named foreign key constraint -->
		<foreign-key constraint-name="ORDER_CUST">
			<many-to-one property="customer" />
			<set property="orders" />
		</foreign-key>
		<!-- can also control a pure (shared pk) one-to-one -->
		<!-- 
			<foreign-key constraint-name="ADDRESS_PERSON" >
			<one-to-one exclude="false" />
			<inverse-one-to-one exclude="true" />
			</foreign-key>
		-->
	</table>
	
	<table name="FinanceOrder">
		<primary-key>
			<!-- setting up a specific id generator for a table -->
			<generator class="sequence">
				<param name="table">seq_FinanceOrder</param>
			</generator>
		</primary-key>
		<column name="NAME" property="orderName" type="string" />
		<!-- control many-to-one and set names for a specific named foreign key constraint -->
		<foreign-key constraint-name="ORDER_CUST">
			<many-to-one property="customer" />
			<set property="orders" />
		</foreign-key>
		<!-- can also control a pure (shared pk) one-to-one -->
		<!-- 
			<foreign-key constraint-name="ADDRESS_PERSON" >
			<one-to-one exclude="false" />
			<inverse-one-to-one exclude="true" />
			</foreign-key>
		-->
	</table>